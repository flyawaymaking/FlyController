package com.flyaway.flycontroller;

import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.command.TabCompleter;
import org.bukkit.entity.Player;

import java.util.ArrayList;
import java.util.List;

public class MFlyCommand implements CommandExecutor, TabCompleter {
    private final FlyPlugin plugin;

    public MFlyCommand(FlyPlugin plugin) {
        this.plugin = plugin;
    }

    @Override
    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
        if (!(sender instanceof Player)) {
            sender.sendMessage("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤!");
            return true;
        }

        Player player = (Player) sender;

        if (!player.hasPermission("flycontroller.mfly")) {
            player.sendMessage("¬ßc–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!");
            return true;
        }

        if (args.length == 0) {
            showFlightInfo(player);
            return true;
        }

        switch (args[0].toLowerCase()) {
            case "info":
                showFlightInfo(player);
                break;

            case "deposit":
                if (args.length < 2) {
                    player.sendMessage("¬ßc–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /mfly deposit <—Å—É–º–º–∞>");
                    return true;
                }
                try {
                    double amount = Double.parseDouble(args[1]);
                    if (amount <= 0) {
                        player.sendMessage("¬ßc–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!");
                        return true;
                    }
                    plugin.depositMoney(player, amount);
                } catch (NumberFormatException e) {
                    player.sendMessage("¬ßc–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!");
                }
                break;

            case "activate":
                plugin.activateFlight(player);
                break;

            case "continue":
                plugin.continueFlight(player);
                break;

            case "reload":
                if (sender.hasPermission("flycontroller.admin")) {
                    plugin.reloadConfiguration();
                    sender.sendMessage("¬ßa–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è FlyPlugin –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞!");
                } else {
                    sender.sendMessage("¬ßc–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!");
                }
                break;

            default:
                player.sendMessage("¬ßc–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:");
                player.sendMessage("¬ße/mfly info ¬ß7- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ –ø–æ–ª—ë—Ç–æ–≤");
                player.sendMessage("¬ße/mfly deposit <—Å—É–º–º–∞> ¬ß7- –í–Ω–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ –Ω–∞ —Å—á—ë—Ç");
                player.sendMessage("¬ße/mfly activate ¬ß7- –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—ë—Ç");
                player.sendMessage("¬ße/mfly continue ¬ß7- –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –ø–æ–ª—ë—Ç");
                if (sender.hasPermission("flycontroller.admin")) {
                    player.sendMessage("¬ße/mfly reload ¬ß7- –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é");
                }
                break;
        }

        return true;
    }

    private void showFlightInfo(Player player) {
        FlightData data = plugin.getPlayerFlightData(player);
        String currencySymbol = plugin.getEconomyManager().getCurrencySymbol();

        player.sendMessage("¬ß6=== –°–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—ë—Ç–∞ ===");
        player.sendMessage("¬ßa–í–∞—à –±–∞–ª–∞–Ω—Å: ¬ße" + data.getBalance() + currencySymbol + "¬ßa –¥–µ–Ω–µ–≥");

        int currentLevel = plugin.calculateFlightLevel(data.getBalance());
        player.sendMessage("¬ßa–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: ¬ße" + currentLevel);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
        double amountForNextLevel = plugin.getAmountForNextLevel(player);
        if (amountForNextLevel > 0) {
            player.sendMessage("¬ßa–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: ¬ße" + amountForNextLevel + currencySymbol);
        } else if (currentLevel >= plugin.getMaxFlightLevel()) {
            player.sendMessage("¬ßa¬ßl–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è! ¬ßaüéâ");
        }

        player.sendMessage("");
        player.sendMessage("¬ß6–£—Ä–æ–≤–Ω–∏ –ø–æ–ª—ë—Ç–∞:");

        // –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–Ω–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        for (FlightTier tier : plugin.getFlightTiers().values()) {
            String status = data.getBalance() >= tier.getMinAmount() ? "¬ßa‚úì" : "¬ßc‚úó";

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è - –º–∏–Ω—É—Ç—ã –∏ —Å–µ–∫—É–Ω–¥—ã
            int minutes = tier.getDuration() / 60;
            int seconds = tier.getDuration() % 60;
            String timeString = minutes + " –º–∏–Ω—É—Ç" + (seconds > 0 ? " " + seconds + " —Å–µ–∫—É–Ω–¥" : "");

            String levelInfo = "–£—Ä–æ–≤–µ–Ω—å " + tier.getLevel() + "¬ß7: " +
                timeString + " - ¬ße" + tier.getMinAmount() + currencySymbol;

            // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
            if (currentLevel == tier.getLevel()) {
                levelInfo = "¬ße‚û§ " + levelInfo + " ¬ß7(—Ç–µ–∫—É—â–∏–π)";
            }

            player.sendMessage(status + " " + levelInfo);
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—ë—Ç–∞
        Long remainingTime = plugin.getRemainingFlightTime(player);
        if (remainingTime > 0) {
            long minutes = remainingTime / 60000;
            long seconds = (remainingTime % 60000) / 1000;
            player.sendMessage("");
            player.sendMessage("¬ßa–ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—ë—Ç: ¬ße" + minutes + " –º–∏–Ω—É—Ç " + seconds + " —Å–µ–∫—É–Ω–¥");
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        Long pausedTime = plugin.getPausedFlightTime(player);
        if (pausedTime == null || pausedTime <= 0) {
            pausedTime = data.getPausedTime();
        }

        if (pausedTime != null && pausedTime > 0) {
            long minutes = pausedTime / 60000;
            long seconds = (pausedTime % 60000) / 1000;
            player.sendMessage("");
            player.sendMessage("¬ßb–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –ø–æ–ª—ë—Ç: ¬ße" + minutes + " –º–∏–Ω—É—Ç " + seconds + " —Å–µ–∫—É–Ω–¥");
            player.sendMessage("¬ßb–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬ße/mfly continue¬ßb –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏");
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫—É
        if (data.getCooldownEnd() > System.currentTimeMillis()) {
            long remainingCooldown = data.getCooldownEnd() - System.currentTimeMillis();
            long cooldownMinutes = remainingCooldown / 60000;
            long cooldownSeconds = (remainingCooldown % 60000) / 1000;

            if (cooldownMinutes > 0) {
                player.sendMessage("¬ßc–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞: ¬ße" + cooldownMinutes + " –º–∏–Ω—É—Ç " + cooldownSeconds + " —Å–µ–∫—É–Ω–¥");
            } else {
                player.sendMessage("¬ßc–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞: ¬ße" + cooldownSeconds + " —Å–µ–∫—É–Ω–¥");
            }
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        player.sendMessage("");
        player.sendMessage("¬ß6–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–æ–ª—ë—Ç–∞:");
        StringBuilder speedsInfo = new StringBuilder();
        for (Integer speed : plugin.getFlySpeeds().keySet()) {
            String speedName = getSpeedName(speed);
            speedsInfo.append("¬ße").append(speed).append("¬ß7 (").append(speedName).append(")¬ßf, ");
        }
        if (speedsInfo.length() > 0) {
            speedsInfo.setLength(speedsInfo.length() - 2); // –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø—è—Ç—É—é
            player.sendMessage(speedsInfo.toString());
            player.sendMessage("¬ß7–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬ße/flyspeed <—É—Ä–æ–≤–µ–Ω—å>¬ß7 –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏");
        }

        player.sendMessage("");
        if (currentLevel < plugin.getMaxFlightLevel()) {
            player.sendMessage("¬ße/mfly deposit <—Å—É–º–º–∞> ¬ß7- –í–Ω–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ –Ω–∞ —Å—á—ë—Ç");
        }
        player.sendMessage("¬ße/mfly activate ¬ß7- –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—ë—Ç");
        if (pausedTime != null && pausedTime > 0) {
            player.sendMessage("¬ße/mfly continue ¬ß7- –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –ø–æ–ª—ë—Ç");
        }
        if (player.hasPermission("flycontroller.admin")) {
            player.sendMessage("¬ße/mfly reload ¬ß7- –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é");
        }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
     */
    private String getSpeedName(int speed) {
        switch (speed) {
            case 1: return "–º–µ–¥–ª–µ–Ω–Ω–æ";
            case 2: return "–Ω–æ—Ä–º–∞–ª—å–Ω–æ";
            case 3: return "–±—ã—Å—Ç—Ä–æ";
            case 4: return "–æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ";
            default: return "—É—Ä–æ–≤–µ–Ω—å " + speed;
        }
    }

    @Override
    public List<String> onTabComplete(CommandSender sender, Command command, String alias, String[] args) {
        List<String> completions = new ArrayList<>();

        if (args.length == 1) {
            completions.add("info");
            completions.add("deposit");
            completions.add("activate");
            completions.add("continue");
            if (sender.hasPermission("flycontroller.admin")) {
                completions.add("reload");
            }
        }

        return completions;
    }
}
